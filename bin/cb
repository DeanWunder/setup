#!/usr/bin/python3
import os
import re
import subprocess

from pylibs.helpers import command
from pylibs.repo_state import get_branch, get_hash, get_repo_state

# Checkout a branch and pull for a particular repo.
def checkout_branch(repo_path, branch):
    p0 = subprocess.Popen(
        ['git', 'stash'],
        stdout=subprocess.DEVNULL,
        cwd=repo_path
    )
    p0.wait()
    p1 = subprocess.Popen(
        ['gsw', branch],
        stdout=subprocess.DEVNULL,
        cwd=repo_path
    )
    p1.wait()
    return subprocess.Popen(
        ['git', 'pull', 'origin', branch],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        cwd=repo_path
    )

def line_to_popen(line):
    user = os.getlogin()
    home = '/home/' + user
    repo_basename = re.search(r'"finao/(.*)":', line).group(1)
    repo = home + '/git/' + repo_basename
    version = re.search(r':.*"(.*)"', line).group(1)

    custom_branch = re.search(r'^dev-([^ ]*)( as)?', version)
    if version == 'dev-master' or re.search(r'^[\^\d\.*]*$', version):
        return checkout_branch(repo, 'master')
    elif version == 'dev-bidfood' and repo_basename == 'inductiondoc':
        return checkout_branch(repo, 'bidfood')
    elif version == 'dev-dlp' and repo_basename == 'links':
        return checkout_branch(repo, 'dlp')
    elif version == 'dev-swd' and repo_basename == 'links':
        return checkout_branch(repo, 'swd')
    elif custom_branch:
        return checkout_branch(repo, custom_branch.group(1))

if __name__ == '__main__':
    user = os.getlogin()
    home = '/home/' + user
    project = command('get_project_from_current_directory')
    composer_json = home + '/git/' + project + '/composer.json'
    # Read data from composer.json
    with open(composer_json, 'r') as f:
        json_lines = f.readlines()

    state = get_repo_state()

    popens = list(map(
        line_to_popen,
        list(filter(
            lambda l: re.search(r'"finao/.*":', l) and not 'vaporize' in l,
            json_lines
        ))
    ))

    # Block until all git pulls are completed.
    for popen in popens:
        if popen:
            popen.wait()
    
    # Print out the current branch for all repos.
    print(command('gsa'))
